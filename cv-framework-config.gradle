

/** ########### RAML UTILS  **/

task generateRamlHtml {
    doLast {
        println "Generating raml html document with /node_modules/raml2html/bin/raml2html"
        exec {
            workingDir '.'
            commandLine 'sh', '-c','$NODE_HOME/node_modules/raml2html/bin/raml2html -i src/main/resources/static/raml/domain-resources-apis.raml -o src/main/resources/static/raml/raml.html'
	    }
    }
}


/** ########### JACOCO OFFLINE CONFIG  **/

//project.ext.jacocoOfflineSourceSets = [ 'main' ]
//task doJacocoOfflineInstrumentation(dependsOn: [ classes, project.configurations.jacocoAnt ]) {
//    inputs.files classes.outputs.files
//    File outputDir = new File(project.buildDir, 'instrumentedClasses')
//    outputs.dir outputDir
//    doFirst {
//        project.delete(outputDir)
//        ant.taskdef(
//            resource: 'org/jacoco/ant/antlib.xml',
//            classpath: project.configurations.jacocoAnt.asPath,
//            uri: 'jacoco'
//        )
//        def instrumented = false
//        jacocoOfflineSourceSets.each { sourceSetName ->
//            if (file(sourceSets[sourceSetName].output.classesDir).exists()) {
//                def instrumentedClassedDir = "${outputDir}/${sourceSetName}"
//                ant.'jacoco:instrument'(destdir: instrumentedClassedDir) {
//                    fileset(dir: sourceSets[sourceSetName].output.classesDir, includes: '**/*.class')
//                }
//                sourceSets.test.runtimeClasspath -= files(sourceSets[sourceSetName].output.classesDir)
//                sourceSets.test.runtimeClasspath += files(instrumentedClassedDir)
//                instrumented = true
//            }
//        }
//        if (instrumented) {
//            test.jvmArgs += '-noverify'
//        }
//    }
//}
//test.dependsOn doJacocoOfflineInstrumentation
